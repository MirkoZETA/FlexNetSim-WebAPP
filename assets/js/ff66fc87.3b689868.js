"use strict";(self.webpackChunkflex_net_sim_web_app=self.webpackChunkflex_net_sim_web_app||[]).push([[733],{4688:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"playground-dev-guide","title":"Developer Guide","description":"This guide provides detailed information about the implementation of the FlexNetSim Playground page, its architecture, and how to extend or modify it.","source":"@site/docs/playground-dev-guide.md","sourceDirName":".","slug":"/playground-dev-guide","permalink":"/FlexNetSim-WebAPP/docs/playground-dev-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/FlexNetSim-WebAPP/docs/intro"},"next":{"title":"Credits","permalink":"/FlexNetSim-WebAPP/docs/credits"}}');var s=i(4848),r=i(8453);const a={sidebar_position:2},o="Developer Guide",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Recent Changes",id:"recent-changes",level:2},{value:"File Structure",id:"file-structure",level:2},{value:"Component Architecture",id:"component-architecture",level:2},{value:"State Management",id:"state-management",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Adding or Modifying Features",id:"adding-or-modifying-features",level:2},{value:"Adding a New Parameter",id:"adding-a-new-parameter",level:3},{value:"Adding a New Stage",id:"adding-a-new-stage",level:3},{value:"Styling Guidelines",id:"styling-guidelines",level:3},{value:"API Integration",id:"api-integration",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Development Tools",id:"development-tools",level:3},{value:"Future Improvements",id:"future-improvements",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Constants",id:"constants",level:3},{value:"Key Functions",id:"key-functions",level:3},{value:"UI Components",id:"ui-components",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"developer-guide",children:"Developer Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide provides detailed information about the implementation of the FlexNetSim Playground page, its architecture, and how to extend or modify it."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Playground is a web-based interface for FlexNetSim, an optical network simulation library. It allows users to run up to three independent simulations with different parameters and compare their results."}),"\n",(0,s.jsx)(n.p,{children:"The interface uses a Chrome-style tabbed design where each tab represents an independent simulation. Users can add, name, and remove simulation tabs (up to a maximum of 3). Each simulation follows a 3-stage workflow:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Settings"}),": Configure the network topology and physical characteristics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),": Set simulation parameters like algorithm, request counts, and rates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Results"}),": View real-time progress and output from the simulation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"recent-changes",children:"Recent Changes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Redesigned the interface with Chrome-style tabs for better user experience"}),"\n",(0,s.jsx)(n.li,{children:'Implemented a "+"-button tab control for adding new simulations'}),"\n",(0,s.jsx)(n.li,{children:"Optimized container width (1900px) to accommodate simulation output without scrolling"}),"\n",(0,s.jsx)(n.li,{children:"Added proper dark mode support with theme-appropriate colors"}),"\n",(0,s.jsx)(n.li,{children:"Fixed tab switching and simulation output formatting"}),"\n",(0,s.jsx)(n.li,{children:"Improved responsiveness for various screen sizes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"/src/pages/playground.js"})}),": Main component implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"/src/pages/playground.module.css"})}),": Component styling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"component-architecture",children:"Component Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The Playground uses React functional components with hooks to manage state and lifecycle."}),"\n",(0,s.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,s.jsxs)(n.p,{children:["The primary state is managed in the ",(0,s.jsx)(n.code,{children:"simulations"})," array, which stores objects with the following structure:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{\n  id: 123456,              // Unique identifier for the simulation\n  name: \"Simulation 1\",    // User-editable name displayed in the tab\n  stage: 1,                // Current workflow stage (1-3)\n  isSimulating: false,     // Whether simulation is running\n  outputLines: [],         // Output text lines from simulation\n  progress: 0,             // Progress percentage (0-100)\n  params: {                // Simulation parameters\n    algorithm: 'FirstFit', // RSA algorithm\n    networkType: 1,        // Network type (EON)\n    goalConnections: 100000, // Target connection requests\n    confidence: 0.05,      // Statistical confidence (95%)\n    lambdaParam: 1.0,      // Connection arrival rate \n    mu: 10.0,              // Connection service rate\n    network: 'NSFNet',     // Network topology\n    bitrate: 'fixed-rate', // Bitrate type\n    K: 3                   // Number of candidate paths\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Other key state variables:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"activeTab"}),': Tracks which tab is currently active (format: "sim-0", "sim-1", etc.)']}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Tab System"}),': Implements a Chrome-style tabbed interface with "+" button for adding tabs']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stage Indicator"}),": Visual indicator for the 3-stage workflow process with numbered steps"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simulation Forms"}),": Dynamic forms for configuring network and simulation parameters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Results Display"}),": Terminal-like output with progress bar and formatted simulation results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Integration"}),": Supports streaming updates from server or mock data for development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dark Mode Support"}),": Automatically adapts to the user's theme preference"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"adding-or-modifying-features",children:"Adding or Modifying Features"}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-new-parameter",children:"Adding a New Parameter"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add the parameter to the initial state in ",(0,s.jsx)(n.code,{children:"useState"})," for simulations"]}),"\n",(0,s.jsx)(n.li,{children:"Add form control in the appropriate stage render function"}),"\n",(0,s.jsxs)(n.li,{children:["Update the API request payload (in ",(0,s.jsx)(n.code,{children:"startSimulation"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Add to initial state\n{\n  params: {\n    // ...existing params\n    newParam: defaultValue,\n  }\n}\n\n// Add form control\n<div className={styles.formGroup}>\n  <label htmlFor={`newParam-${simulation.id}`}>New Parameter</label>\n  <input \n    type="text" \n    id={`newParam-${simulation.id}`}\n    name="newParam"\n    value={simulation.params.newParam}\n    onChange={(e) => handleParamChange(simulation.id, e)}\n    className={styles.input}\n  />\n  <span className={styles.inputHint}>Description of the parameter</span>\n</div>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-new-stage",children:"Adding a New Stage"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Update the ",(0,s.jsx)(n.code,{children:"STAGES"})," constant in the component"]}),"\n",(0,s.jsx)(n.li,{children:"Add a new render function for the stage"}),"\n",(0,s.jsx)(n.li,{children:"Update the stage indicator component to include the new stage"}),"\n",(0,s.jsxs)(n.li,{children:["Add case to the ",(0,s.jsx)(n.code,{children:"renderSimulationContent"})," switch statement"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"styling-guidelines",children:"Styling Guidelines"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use CSS modules (imported as ",(0,s.jsx)(n.code,{children:"styles"}),") for component styling"]}),"\n",(0,s.jsx)(n.li,{children:"Follow the established color scheme using Docusaurus CSS variables"}),"\n",(0,s.jsxs)(n.li,{children:["For dark mode support, use ",(0,s.jsx)(n.code,{children:"[data-theme='dark']"})," selectors in the CSS"]}),"\n",(0,s.jsx)(n.li,{children:"Use custom CSS variables to maintain consistent theming in both light and dark mode"}),"\n",(0,s.jsx)(n.li,{children:"Keep fixed dimensions for the container width (1900px) to ensure simulation output fits properly"}),"\n",(0,s.jsx)(n.li,{children:"Maintain responsive design for various screen sizes, falling back gracefully on smaller displays"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"api-integration",children:"API Integration"}),"\n",(0,s.jsx)(n.p,{children:"The Playground connects to the FlexNetSim API or uses mock data for development. Key functions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"startSimulation"}),": Initiates the simulation and sets up streaming updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"runMockSimulation"}),": Generates mock data for testing without API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"processStream"}),": Handles the streaming response from the server"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To switch between real API and mock data, modify:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const useMockData = true; // Set to false to use real API\n"})}),"\n",(0,s.jsx)(n.p,{children:"When implementing a real API connection, ensure proper error handling and maintain the same data format as the mock implementation."}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tab management issues"}),": Check the ",(0,s.jsx)(n.code,{children:"activeTab"})," state and ensure proper cleanup when removing tabs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simulation state not updating"}),": Verify the correct simulation ID is being passed to ",(0,s.jsx)(n.code,{children:"updateSimulation"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"UI not reflecting parameter changes"}),": Check that form inputs have correct ",(0,s.jsx)(n.code,{children:"name"})," attributes matching params"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dark mode inconsistencies"}),": Ensure appropriate theme variables in CSS"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"development-tools",children:"Development Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use React DevTools to inspect component state"}),"\n",(0,s.jsx)(n.li,{children:"Monitor network traffic when testing API integration"}),"\n",(0,s.jsx)(n.li,{children:"Check browser console for errors or warnings"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,s.jsx)(n.p,{children:"Potential enhancements to consider:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simulation Comparison"}),": Add side-by-side comparison of multiple simulation results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visualization"}),": Add charts and graphs to visualize simulation results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration Management"}),": Save/load simulation configurations for reuse"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simulation Presets"}),": Add predefined settings for common simulation scenarios"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Export Functionality"}),": Allow exporting results in various formats (CSV, JSON, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsive Design"}),": Improve mobile and tablet support with adaptive layouts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time Collaboration"}),": Allow multiple users to view the same simulation with shared state"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NETWORKS"}),": Available network topologies (NSFNet, Cost239, EuroCore, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ALGORITHMS"}),": Available RSA algorithms (FirstFit, BestFit, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BITRATES"}),": Available bitrate modes (fixed-rate, flex-rate)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"STAGES"}),": Workflow stages object defining the three simulation stages"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"updateSimulation(id, updates)"}),": Updates a specific simulation's state by ID"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"handleParamChange(id, event)"}),": Handles form input changes and converts to appropriate types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"addSimulation()"}),": Adds a new simulation tab and switches to it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"removeSimulation(index)"}),": Removes a simulation tab and handles tab switching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"updateSimulationName(index, name)"}),": Updates the name displayed in the tab"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"startSimulation(id)"}),": Starts the simulation process and switches to results view"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"runMockSimulation(id)"}),": Generates mock simulation data for testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"advanceStage(id)"})," / ",(0,s.jsx)(n.code,{children:"goBack(id)"}),": Navigate between simulation workflow stages"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ui-components",children:"UI Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"renderStageIndicator(simulation)"}),": Renders the 3-step workflow indicator"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"renderNetworkSettings(simulation)"}),": Renders the network configuration form"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"renderSimulationParameters(simulation)"}),": Renders the simulation parameters form"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"renderSimulationResults(simulation)"}),": Renders the output display and progress indicators"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);